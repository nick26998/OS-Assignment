#include<stdio.h>
#include<math.h>
#include<pthread.h>
int reader_count=0,shared_variable=0;
pthread_mutex_t reader_lock,writer_lock;

void *reader(int i)
  {
	int time=srand()%200;
	usleep(time);

	
	pthread_mutex_lock(&reader_lock);
		
	reader_count++;
	
	
	if(reader_count==1) 
	pthread_mutex_lock(&writer_lock);

  
	pthread_mutex_unlock(&reader_lock);
	 printf("Value read by reader %d is %d\n\n",i+1,shared_variable);
	pthread_mutex_lock(&reader_lock);
	reader_count--;
	if(reader_count==0)
	pthread_mutex_unlock(&writer_lock);
	pthread_mutex_unlock(&reader_lock);
	pthread_exit("0");  
	}


void *writer(int i)
{


if(reader_count==0)
{
pthread_mutex_lock(&writer_lock);
int y;
y=rand()%100;
printf("Value written by writer %d is %d\n",i+1,y);
printf("Readers present when writer %d has written: %d\n\n",i+1,reader_count);
shared_variable=y;

pthread_mutex_unlock(&writer_lock);

}
pthread_exit("0");
}



int main()
{

pthread_t p[10],q[10];
int readers,writers,i;
pthread_mutex_init(&reader_lock,NULL);
pthread_mutex_init(&writer_lock,NULL);
printf("Enter the number of readers(max 10): ");
scanf("%d",&readers);
printf("Enter the number of writers(max 10): ");
scanf("%d",&writers);

if(readers>10 || writers>10) 
{
printf("Maximum 10 writers and 10 readers are supported only\n");
exit(0);
}
if(writers<1)
{
printf("Minimum writers supported is 1\n");
exit(0);
}


printf("\n");
for(i=0;i<writers;i++)
pthread_create(&p[i],NULL,writer,i);
for(i=0;i<readers;i++)
pthread_create(&q[i],NULL,reader,i);
for(i=0;i<writers;i++)
{
pthread_join(p[i],NULL);

}
for(i=0;i<readers;i++)
pthread_join(q[i],NULL);
}

